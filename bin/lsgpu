#!/usr/bin/env python

# This script runs $cmd on each of the $hosts in parallel and print output
# by default, cmd=gpustat and hosts are all hostnames that begins with g

import argparse
import subprocess
from itertools import repeat
from concurrent.futures import ProcessPoolExecutor

CMD_DEFAULT = '/usr/local/anaconda3/bin/gpustat --force-color --gpuname-width 10'

# run command on remote machine using ssh, return lines of output
def ssh_run(host: str, cmd: str, timeout: float, verbose: bool = False):
    # replace ' with '"'"' to allow single quotes in cmd
    # https://stackoverflow.com/a/1250279/17347885
    cmd = cmd.replace("'", "'\"'\"'")
    ssh_cmd = f"ssh {host} '{cmd}'"
    if verbose:
        print(ssh_cmd)
    try:
        return subprocess.run(
            ssh_cmd,
            shell=True, text=True,
            stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
            timeout=timeout,
        ).stdout
    except subprocess.TimeoutExpired as e:
        return str(e) + '\n'

if __name__ == '__main__':
    parser = argparse.ArgumentParser('lsgpu')
    parser.add_argument('-c', '--cmd', type=str, default=CMD_DEFAULT, help='command to execute on hosts')
    parser.add_argument('-o', '--hosts', nargs='+', type=str, help='list of hosts to query')
    parser.add_argument('-t', '--timeout', type=float, default=10, help='command timeout in seconds (float)')
    parser.add_argument('-v', '--verbose', action='store_true', help='print all executed commands')
    args = parser.parse_args()
    if args.hosts is not None:  # query hosts in arguments
        hosts = args.hosts
    else:
        hosts = subprocess.getoutput(r"sed -rn 's/^\s*Host\s+(.*)\s*/\1/ip' ~/.ssh/config* | grep '^g'").split()
        # config* for config and config_local on my machine
    with ProcessPoolExecutor(max_workers=len(hosts)) as executor:
        procs = executor.map(ssh_run, hosts, repeat(args.cmd), repeat(args.timeout), repeat(args.verbose))
        for host, data in zip(hosts, procs):
            print(f"Host {host}:")
            print(data, end='')
