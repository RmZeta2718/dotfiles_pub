#!/usr/bin/env python

# This script runs $cmd on each of the $hosts in parallel and print output
# by default, cmd=gpustat and hosts are all hostnames that begins with g

import argparse
import itertools
import subprocess
from concurrent.futures import ProcessPoolExecutor

CMD_DEFAULT = '/usr/local/anaconda3/bin/gpustat --force-color --gpuname-width 10'

# run command on remote machine using ssh, return lines of output
def ssh_run(host, cmd):
    return subprocess.run(f"ssh {host} -T '{cmd}'",
        shell=True, text=True,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
    ).stdout

if __name__ == '__main__':
    parser = argparse.ArgumentParser('lsgpu')
    parser.add_argument('-c', '--cmd', type=str, default=CMD_DEFAULT, help='command to execute on hosts')
    parser.add_argument('--hosts', nargs='+', type=str, help='list of hosts to query')
    args = parser.parse_args()
    if args.hosts is not None:  # query hosts in arguments
        hosts = args.hosts
    else:
        hosts = subprocess.getoutput(r"sed -rn 's/^\s*Host\s+(.*)\s*/\1/ip' ~/.ssh/config* | grep '^g'").split()
        # config* for config and config_local on my machine
    with ProcessPoolExecutor(max_workers=len(hosts)) as executor:
        for host, data in zip(hosts, executor.map(ssh_run, hosts, itertools.repeat(args.cmd))):
            print(f"Host {host}:")
            print(data, end='')
