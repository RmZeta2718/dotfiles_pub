#!/usr/bin/env python

# This script runs $cmd on each of the $hosts in parallel and print output
# by default, cmd=gpustat and hosts are all hostnames that begins with g

import argparse
import getpass
import subprocess
from concurrent.futures import ProcessPoolExecutor
from itertools import repeat


class color:
    BOLD = "\033[1m"
    END = "\033[0m"


CMD_DEFAULT = "/usr/local/anaconda3/bin/gpustat --force-color --gpuname-width 10"


def parse_args():
    parser = argparse.ArgumentParser("lsgpu")
    parser.add_argument(
        "-c", "--cmd", type=str, default=CMD_DEFAULT, help="command to execute on hosts, default gpustat"
    )
    parser.add_argument("-o", "--hosts", nargs="+", type=str, help="list of hosts to query")
    parser.add_argument(
        "-t", "--timeout", type=float, default=10, help="command timeout in seconds (float), default 10s"
    )
    parser.add_argument("-v", "--verbose", action="store_true", help="print all executed commands")
    template_help = (
        "By default, --cmd is run on remote using default ssh template. But when --template is on, --cmd is treated as template. "
        "So {host} in --cmd will be replaced by actual host and the script will iterate through hosts for you."
    )
    parser.add_argument("-T", "--template", action="store_true", help=template_help)
    args = parser.parse_args()
    if args.hosts is None:
        args.hosts = subprocess.getoutput(r"sed -rn 's/^\s*Host\s+(.*)\s*/\1/ip' ~/.ssh/config* | grep '^g'").split()
        # config* for config and config_local on my machine
    if args.template and "{host}" not in args.cmd:
        parser.error("When using template, specify {host} in --cmd")
    return args


def get_sudo_password():
    """Prompt user for sudo password if not already cached"""
    return getpass.getpass("Enter sudo password: ")


def replace_sudo_with_password(cmd: str, password: str):
    """Replace 'sudo' with 'echo password | sudo -Sp '' in the command"""
    # Escape single quotes in password for shell safety
    escaped_password = password.replace("'", "'\"'\"'")
    return cmd.replace("sudo ", f"echo '{escaped_password}' | sudo -Sp '' ")


def parse_cmd(host: str, cmd: str, template: bool, verbose: bool, sudo_password: str | None = None):
    # Check if command contains sudo
    if "sudo " in cmd and sudo_password:
        cmd = replace_sudo_with_password(cmd, sudo_password)
    if template:
        # replace {host} with host
        parsed_cmd = cmd.format(host=host)
    else:
        # replace ' with '"'"' to allow single quotes in cmd
        # https://stackoverflow.com/a/1250279/17347885
        cmd = cmd.replace("'", "'\"'\"'")
        # run command on remote machine
        parsed_cmd = f"ssh {host} '{cmd}'"
    if verbose:
        print(parsed_cmd)
    return parsed_cmd


def run_cmd(cmd: str, timeout: float):
    try:
        rst = subprocess.run(
            cmd,
            shell=True,
            text=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            timeout=timeout,
        )
        return rst.stdout, rst.returncode
    except subprocess.TimeoutExpired as e:
        return str(e) + "\n", 1


def format_host(host: str):
    return f"{color.BOLD}Host {host}:{color.END}"


def format_output(output: str, host: str):
    return f"{format_host(host)}\n{output}"


# run command on one machine using ssh or on local, return command output
def run_one(host: str, cmd: str, timeout: float, template: bool, verbose: bool, sudo_password: str | None = None):
    parsed_cmd = parse_cmd(host, cmd, template, verbose, sudo_password)
    output, rc = run_cmd(parsed_cmd, timeout)
    output = format_output(output, host)
    return output, rc


if __name__ == "__main__":
    args = parse_args()

    # Check if command contains sudo and get password if needed
    sudo_password = None
    if "sudo " in args.cmd:
        sudo_password = get_sudo_password()

    with ProcessPoolExecutor(max_workers=len(args.hosts)) as executor:
        procs = executor.map(
            run_one, args.hosts, *map(repeat, (args.cmd, args.timeout, args.template, args.verbose, sudo_password))
        )
        all_rc = []
        for output, rc in procs:
            print(output)
            all_rc.append(rc)
        if any(all_rc):  # any of the hosts exited with non-zero code
            print("Warning: some hosts exited with non-zero code:")
            print("\t".join(f"{format_host(host)}{rc}" for host, rc in zip(args.hosts, all_rc) if rc))
